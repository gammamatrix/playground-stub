<?php
/**
 * {{organization}}
 */

namespace {{ namespace }};
{{ use }}use {{ namespacedRequest }}\CreateRequest;
use {{ namespacedRequest }}\DestroyRequest;
use {{ namespacedRequest }}\EditRequest;
use {{ namespacedRequest }}\IndexRequest;
use {{ namespacedRequest }}\LockRequest;
use {{ namespacedRequest }}\RestoreRequest;
use {{ namespacedRequest }}\ShowRequest;
use {{ namespacedRequest }}\StoreRequest;
use {{ namespacedRequest }}\UnlockRequest;
use {{ namespacedRequest }}\UpdateRequest;
use {{ namespacedResource }}\{{ model }} as {{ model }}Resource;
use {{ namespacedResource }}\{{ model }}Collection;
use {{ namespacedModel }};
use Illuminate\Http\Response;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\View\View;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;

/**
 * \{{ namespace }}\{{ class }}
 */
class {{ class }} extends {{ extends }}{{ implements }}
{
{{ use_class }}{{ constants }}{{ properties }}    public array $packageInfo = [
        'model_attribute'     => '{{model_attribute}}',
        'model_label'         => '{{model_label}}',
        'model_label_plural'  => '{{model_label_plural}}',
        'model_route'         => '{{model_route}}',
        'model_slug'          => '{{model_slug}}',
        'model_slug_plural'   => '{{model_slug_plural}}',
        'module_label'        => '{{module_label}}',
        'module_label_plural' => '{{module_label_plural}}',
        'module_route'        => '{{module_route}}',
        'module_slug'         => '{{module_slug}}',
        'table'               => '{{table}}',
        'view'                => '{{view}}',
    ];

    /**
     * CREATE the {{model_label}} resource in storage.
     *
     * @route GET /resource/{{module_slug}}/{{model_slug_plural}}/create {{model_route}}.create
     */
    public function create(
        CreateRequest $request
    ): JsonResponse|View {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}} = new {{model}}($validated);

        $meta = [
            'session_user_id' => $user->id,
            'id'              => null,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
            'info'            => $this->packageInfo,
        ];

        $meta['input'] = $request->input();
        $meta['validated'] = $request->validated();

        $data = [
            'data' => ${{model_slug}},
            'meta' => $meta,
            '_method' => 'post',
        ];

        if ($request->expectsJson()) {
            return response()->json($data);
        }

        $flash = ${{model_slug}}->toArray();

        if (!empty($validated['_return_url'])) {
            $flash['_return_url'] = $validated['_return_url'];
            $data['_return_url'] = $validated['_return_url'];
        }

        if (!$request->session()->has('errors')) {
            session()->flashInput($flash);
        }

        return view(
            '{{ view }}/form',
            $data
        );
    }

    /**
     * Edit the {{model_label}} resource in storage.
     *
     * @route GET /resource/{{module_slug}}/{{model_slug_plural}}/edit {{model_route}}.edit
     */
    public function edit(
        {{ model }} ${{model_slug}},
        EditRequest $request
    ): JsonResponse|View {
        $validated = $request->validated();

        $user = Auth::getUser();

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{model_slug}}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
            'info'            => $this->packageInfo,
        ];

        $meta['input'] = $request->input();
        $meta['validated'] = $request->validated();

        $data = [
            'data' => ${{model_slug}},
            'meta' => $meta,
            '_method' => 'patch',
        ];

        if ($request->expectsJson()) {
            return response()->json($data);
        }

        $flash = ${{model_slug}}->toArray();

        if (!empty($validated['_return_url'])) {
            $flash['_return_url'] = $validated['_return_url'];
            $data['_return_url'] = $validated['_return_url'];
        }

        session()->flashInput($flash);

        return view(
            '{{ view }}/form',
            $data
        );
    }

    /**
     * Remove the {{model_label}} resource from storage.
     *
     * @route DELETE /resource/{{module_slug}}/{{{model_slug}}} {{model_route}}.destroy
     */
    public function destroy(
        {{ model }} ${{model_slug}},
        DestroyRequest $request
    ): Response|RedirectResponse {
        $validated = $request->validated();

        if (empty($validated['force'])) {
            ${{model_slug}}->delete();
        } else {
            ${{model_slug}}->forceDelete();
        }

        if ($request->expectsJson()) {
            return response()->noContent();
        }

        $returnUrl = $validated['_return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}'));
    }

    /**
     * Lock the {{model_label}} resource in storage.
     *
     * @route PUT /resource/{{module_slug}}/{{{model_slug}}} {{model_route}}.lock
     */
    public function lock(
        {{ model }} ${{model_slug}},
        LockRequest $request
    ): JsonResponse|RedirectResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}}->locked = true;

        ${{model_slug}}->save();

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{model_slug}}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'info'            => $this->packageInfo,
        ];

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $returnUrl = $validated['_return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}.show', ['{{model_slug}}' => ${{model_slug}}->id]));
    }

    /**
     * Display a listing of {{model_label}} resources.
     *
     * @route GET /resource/{{module_slug}} {{model_route}}
     */
    public function index(
        IndexRequest $request
    ): JsonResponse|View {
        $user = Auth::getUser();

        $validated = $request->validated();

        $query = {{ model }}::addSelect(sprintf('%1$s.*', $this->packageInfo['table']));

        $query->sort($validated['sort'] ?? null);

        if (!empty($validated['filter']) && is_array($validated['filter'])) {

            $query->filterTrash($validated['filter']['trash'] ?? null);

            $query->filterIds(
                $request->getPaginationIds(),
                $validated
            );

            $query->filterFlags(
                $request->getPaginationFlags(),
                $validated
            );

            $query->filterDates(
                $request->getPaginationDates(),
                $validated
            );

            $query->filterColumns(
                $request->getPaginationColumns(),
                $validated
            );
        }

        $paginator = $query->paginate($validated['perPage'] ?? null);

        $paginator->appends($validated);

        if ($request->expectsJson()) {
            return (new {{ model }}Collection($paginator))->additional(['meta' => [
                'session_user_id' => $user->id,
                'validated'       => $validated,
            ]]);
        }

        $meta = [
            'session_user_id' => $user->id,
            'columns'         => $request->getPaginationColumns(),
            'dates'           => $request->getPaginationDates(),
            'flags'           => $request->getPaginationFlags(),
            'ids'             => $request->getPaginationIds(),
            'rules'           => $request->rules(),
            'sortable'        => $request->getSortable(),
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
            'info'            => $this->packageInfo,
        ];

        $data = [
            'paginator' => $paginator,
            'meta' => $meta,
        ];

        return view(
            '{{ view }}/index',
            $data
        );
    }

    /**
     * Restore the {{model_label}} resource from the trash.
     *
     * @route PUT /resource/{{module_slug}}/restore/{{{model_slug}}} {{model_route}}.restore
     */
    public function restore(
        {{ model }} ${{model_slug}},
        RestoreRequest $request
    ): JsonResponse|RedirectResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}}->restore();

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $returnUrl = $validated['_return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}.show', ['{{model_slug}}' => ${{model_slug}}->id]));
    }

    /**
     * Display the {{model_label}} resource.
     *
     * @route GET /resource/{{module_slug}}/{{{model_slug}}} {{model_route}}.show
     */
    public function show(
        {{ model }} ${{model_slug}},
        ShowRequest $request
    ): JsonResponse|View {
        $validated = $request->validated();

        $user = Auth::getUser();

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{model_slug}}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
            'info'            => $this->packageInfo,
        ];

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $meta['input'] = $request->input();
        $meta['validated'] = $request->validated();

        $data = [
            'data' => ${{model_slug}},
            'meta' => $meta,
        ];

        return view(
            '{{ view }}/detail',
            $data
        );
    }

   /**
     * Store a newly created API {{model_label}} resource in storage.
     *
     * @route POST /resource/{{module_slug}} {{model_route}}.post
     */
    public function store(
        StoreRequest $request
    ): Response|JsonResponse|RedirectResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}} = new {{ model }}($validated);

        ${{model_slug}}->save();

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $returnUrl = $validated['return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}.show', ['{{model_slug}}' => ${{model_slug}}->id]));
    }

    /**
     * Unlock the {{model_label}} resource in storage.
     *
     * @route DELETE /resource/{{module_slug}}/lock/{{{model_slug}}} {{model_route}}.unlock
     */
    public function unlock(
        {{ model }} ${{model_slug}},
        UnlockRequest $request
    ): JsonResponse|RedirectResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}}->locked = false;

        ${{model_slug}}->save();

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $returnUrl = $validated['return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}.show', ['{{model_slug}}' => ${{model_slug}}->id]));
    }

    /**
     * Update the {{model_label}} resource in storage.
     *
     * @route PATCH /resource/{{module_slug}}/{{{model_slug}}} {{model_route}}.patch
     */
    public function update(
        {{ model }} ${{model_slug}},
        UpdateRequest $request
    ): JsonResponse|RedirectResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        ${{model_slug}}->update($validated);

        if ($request->expectsJson()) {
            return new {{ model }}Resource(${{model_slug}});
        }

        $returnUrl = $validated['return_url'] ?? '';

        if ($returnUrl) {
            return redirect($returnUrl);
        }

        return redirect(route('{{model_route}}.show', ['{{model_slug}}' => ${{model_slug}}->id]));
    }{{ relationships }}{{ actions }}{{ methods }}
}
