<?php
/**
 * {{organization}}
 */

namespace {{ namespace }};
{{ use }}use {{ namespacedRequest }}\DestroyRequest;
use {{ namespacedRequest }}\IndexRequest;
use {{ namespacedRequest }}\RestoreRequest;
use {{ namespacedRequest }}\ShowRequest;
use {{ namespacedRequest }}\StoreRequest;
use {{ namespacedRequest }}\UpdateRequest;
use {{ namespacedModel }};
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;

/**
 * \{{ namespace }}\{{ class }}
 */
class {{ class }} extends {{ extends }}{{ implements }}
{
{{ use_class }}{{ constants }}{{ properties }}    /**
     * Remove the API {{ modelLabel }} resource from storage.
     *
     * @route DELETE /api/{{ modelSlugPlural }}/{{{ modelVariable }}} {{ modelSlugPlural }}.destroy
     */
    public function destroy(
        {{ model }} ${{ modelVariable }},
        DestroyRequest $request
    ): Response {
        $validated = $request->validated();

        if (empty($validated['force'])) {
            ${{ modelVariable }}->delete();
        } else {
            ${{ modelVariable }}->forceDelete();
        }

        return response()->noContent();
    }

    /**
     * Display a listing of {{ modelLabel }} resources.
     *
     * @route GET /api/{{ modelSlugPlural }} {{ modelSlugPlural }}.index
     */
    public function index(
        IndexRequest $request
    ): JsonResponse {
        $user = Auth::getUser();

        $validated = $request->validated();

        ${{ modelSlugPlural }} = {{ model }}::filter($validated['filter'] ?? [])
            ->sort($validated['sort'] ?? [])
            ->paginate($validated['per_page'])
            ->appends($validated);

        $transformer = new {{ model }}Transformer();

        $fractal = fractal(${{ modelSlugPlural }}, $transformer, new ResponseSerializer());

        $meta = [
            'session_user_id' => $user->id,
            'sortable'        => $request->getSortable(),
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
        ];

        $fractal->addMeta($meta);

        return $fractal->respond();
    }

    /**
     * Display the API {{ modelLabel }} resource.
     *
     * @route GET /api/{{ modelSlugPlural }}/{{{ modelVariable }}} {{ modelSlugPlural }}.show
     */
    public function show(
        {{ model }} ${{ modelVariable }},
        ShowRequest $request
    ): JsonResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{ modelVariable }}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
        ];

        $transformer = new {{ model }}Transformer();

        $fractal = fractal(${{ modelVariable }}, $transformer);

        $fractal->addMeta($meta);

        return $fractal->respond();
    }

   /**
     * Store a newly created API {{ modelLabel }} resource in storage.
     *
     * @route POST /api/{{ modelSlugPlural }} {{ modelSlugPlural }}.post
     */
    public function store(
        StoreRequest $request
    ): JsonResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        $transformer = new {{ model }}Transformer();

        ${{ modelVariable }} = new {{ model }}($validated);

        ${{ modelVariable }}->save();

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{ modelVariable }}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
        ];

        $fractal = fractal(${{ modelVariable }}, $transformer);

        $fractal->addMeta($meta);

        return $fractal->respond(201);
    }

    /**
     * Update the API {{ modelLabel }} resource in storage.
     *
     * @route PATCH /api/{{ modelSlugPlural }}/{{{ modelVariable }}} {{ modelSlugPlural }}.patch
     */
    public function update(
        {{ model }} ${{ modelVariable }},
        UpdateRequest $request
    ): JsonResponse {
        $validated = $request->validated();

        $user = Auth::getUser();

        $transformer = new {{ model }}Transformer();

        ${{ modelVariable }}->update($validated);

        $meta = [
            'session_user_id' => $user->id,
            'id'              => ${{ modelVariable }}->id,
            'timestamp'       => Carbon::now()->toJson(),
            'validated'       => $validated,
        ];

        $fractal = fractal(${{ modelVariable }}, $transformer);

        $fractal->addMeta($meta);

        return $fractal->respond();
    }{{ relationships }}{{ actions }}{{ methods }}
}
